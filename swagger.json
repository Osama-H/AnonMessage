{
  "swagger": "2.0",
  "info": {
    "title": "SarahaApp API",
    "version": "1.0.0",
    "description": "API documentation for SarahaApp"
  },
  "host": "localhost:3000",
  "basePath": "/api/v1",
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/auth/signup": {
      "post": {
        "summary": "Sign up a new user",
        "tags": ["Auth"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignUp"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User signed up successfully"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Login a user",
        "tags": ["Auth"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User logged in successfully"
          },
          "401": {
            "description": "Invalid email or password"
          }
        }
      }
    },
    "/auth/refreshToken": {
      "post": {
        "summary": "Refresh access token",
        "tags": ["Auth"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RefreshToken"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Access token refreshed successfully"
          },
          "401": {
            "description": "Invalid refresh token"
          }
        }
      }
    },
    "/auth/forgotPassword": {
      "post": {
        "summary": "Request password reset",
        "tags": ["Auth"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ForgotPassword"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset email sent"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/auth/resetPassword/{resetToken}": {
      "patch": {
        "summary": "Reset user password",
        "tags": ["Auth"],
        "parameters": [
          {
            "in": "path",
            "name": "resetToken",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetPassword"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset successfully"
          },
          "400": {
            "description": "Token is invalid or has expired"
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "Get users",
        "tags": ["Users"],
        "parameters": [
          {
            "in": "query",
            "name": "username",
            "type": "string",
            "description": "Filter users by username"
          },
          {
            "in": "query",
            "name": "page",
            "type": "integer",
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "description": "Number of users per page"
          },
          {
            "in": "query",
            "name": "id",
            "type": "integer",
            "description": "Filter users by id"
          }
        ],
        "responses": {
          "200": {
            "description": "List of users"
          }
        }
      }
    },
    "/users/myProfile": {
      "get": {
        "summary": "Get current user's profile",
        "tags": ["Users"],
        "responses": {
          "200": {
            "description": "User profile"
          }
        }
      }
    },
    "/users/updateMe": {
      "patch": {
        "summary": "Update current user's profile",
        "tags": ["Users"],
        "consumes": ["multipart/form-data"],
        "parameters": [
          {
            "in": "formData",
            "name": "photo",
            "type": "file",
            "description": "User photo"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User updated successfully"
          }
        }
      }
    },
    "/users/updatePassword": {
      "patch": {
        "summary": "Update current user's password",
        "tags": ["Users"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePassword"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password updated successfully"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "Get user by ID",
        "tags": ["Users"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "User details"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/deactivate/{id}": {
      "delete": {
        "summary": "Deactivate a user account",
        "tags": ["Users"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "User deactivated successfully"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/activate/{id}": {
      "patch": {
        "summary": "Activate a user account",
        "tags": ["Users"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "User activated successfully"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/messages": {
      "post": {
        "summary": "Send a message",
        "tags": ["Messages"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SendMessage"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Message sent successfully"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/messages/received": {
      "get": {
        "summary": "Get received messages",
        "tags": ["Messages"],
        "responses": {
          "200": {
            "description": "List of received messages"
          },
          "404": {
            "description": "No messages found"
          }
        }
      }
    },
    "/messages/sent": {
      "get": {
        "summary": "Get sent messages",
        "tags": ["Messages"],
        "responses": {
          "200": {
            "description": "List of sent messages"
          },
          "404": {
            "description": "No messages found"
          }
        }
      }
    }
  },
  "definitions": {
    "SignUp": {
      "type": "object",
      "required": ["name", "email", "password"],
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "Login": {
      "type": "object",
      "required": ["email", "password"],
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "RefreshToken": {
      "type": "object",
      "required": ["refreshToken"],
      "properties": {
        "refreshToken": {
          "type": "string"
        }
      }
    },
    "ForgotPassword": {
      "type": "object",
      "required": ["email"],
      "properties": {
        "email": {
          "type": "string"
        }
      }
    },
    "ResetPassword": {
      "type": "object",
      "required": ["newPassword"],
      "properties": {
        "newPassword": {
          "type": "string"
        }
      }
    },
    "UpdateUser": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "UpdatePassword": {
      "type": "object",
      "required": ["currentPassword", "newPassword"],
      "properties": {
        "currentPassword": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        }
      }
    },
    "SendMessage": {
      "type": "object",
      "required": ["text", "recipient_id", "asAnonymousSender"],
      "properties": {
        "text": {
          "type": "string"
        },
        "recipient_id": {
          "type": "integer"
        },
        "asAnonymousSender": {
          "type": "boolean"
        }
      }
    }
  },
  "responses": {
    "UnauthorizedError": {
      "description": "Authentication information is missing or invalid"
    },
    "NotFoundError": {
      "description": "Resource not found"
    },
    "BadRequestError": {
      "description": "Bad Request"
    }
  }
}
